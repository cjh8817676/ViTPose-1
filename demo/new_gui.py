# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\USER\Downloads\new_gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys,os
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import cv2
import json
import math
import time
import numpy as np
import matplotlib.pyplot as plt
import pyqtgraph as pg
from PyQt5 import uic
import pandas as pd
import pdb
import glob
from PIL import Image
file_path = os.path.dirname(__file__)
from numba import jit
from collections import defaultdict
from defaultlist import defaultlist

from scipy.signal import find_peaks

HUMAN_MASK = 1  # The number of the human mask
BAR_MASK   = 2  # The number of the bar mask


imu_data_pd = pd.DataFrame()
imu_data_len = 0
imu_sample_rate = 400
imu_data_gyrox = []
imu_data_gyroy = []
imu_data_gyroz = []
imu_data_accx = []
imu_data_accy = []
imu_data_accz = []
imu_data_haccx = []
imu_data_haccy = []
imu_data_haccz = []
imu_data_left = 0
imu_data_right = 1200



handoff_radius = 30 # 30 pixel

# coco pose
'''
[nose,leye,reye,lear,rear,lshoulder,rshoulder,lelbow,relbow,lwrist,rwrist,lhip,rhip,lknee,rknee,lankle,rankle]
'''

# y_true : np.array() ' predictions : list
def mae(y_true, predictions):
    # pdb.set_trace()
    while (y_true.shape[0] < len(predictions)):
        predictions.pop()
    
    while (y_true.shape[0] > len(predictions)):
        y_true = y_true[0:y_true.shape[0]-1]
    
    
    y_true, predictions = y_true, np.array(predictions)
    return np.mean(np.abs(y_true - predictions))

# mask of human is red
# @jit(nopython=True)
def find_human_mask(original_mask):
    # pdb.set_trace()
    h, w = original_mask.shape
    # human_mask = np.zeros((w,h,3)) # plt.imshow(human_mask) to verify if we only get human mask
    human_mask_point = []

    
    rows,cols = np.where((original_mask[:,:]==HUMAN_MASK))

    
    for i,j in zip(rows,cols):
        human_mask_point.append([j,i])
        # print(i,j)
    
    return human_mask_point

# mask of high bar is green
# @jit(nopython=True)
def find_horizontal_bar_mask(original_mask):
    # pdb.set_trace()

    w , h = original_mask.shape

    min_row = 4000
    min_col = 4000
    max_col = -1
    max_row = -1
    

    rows,cols = np.where(original_mask[:,:]==BAR_MASK)

    min_row = min(rows)
    max_row = max(rows)
    min_col = min(cols)
    max_col = max(cols)
                
    
    if len(rows) == 0:
        print("no bar mask!")
                
    top_of_bar = [min_col , min_row]
    bottom_of_bar = [max_col , max_row]
                
    return [top_of_bar, bottom_of_bar]

# get closet distance from a sets and a point
# @jit(nopython=True)
def get_mini_distance(point,mask_set):
    latest_distance =4000
    for i in mask_set:
        distance = np.sqrt(np.sum(np.square(point-i)))
        if latest_distance > distance:
            latest_distance = distance
    
    return latest_distance
# @jit(nopython=True)
def check_handoff(bar_point,human_hand,human_mask):
    # bar_point: left_top and roght bottom [[min_col,min_row],[max_col,max_row]] (row: h col : w)
    # human_mask: many points as mask, enery points is [col, row]
    # pdb.set_trace()
    bar_highest_point = np.array([ ( bar_point[0][0] + bar_point[1][0] ) / 2 , bar_point[0][1] + 5])  # (+2)降低一點單槓高度 [col,row]
    
            
    left_wrist = human_hand[0] # [col,row]
    right_wrist = human_hand[1] # [col,row]
    
    # (self.horizontal_bar_points[0][0] + self.horizontal_bar_points[1][0])/2 , self.horizontal_bar_points[0][1]+5), 15, (255,0,0), 2)

    # didtance between left wrist and bar. (unit : pixel )
    dblwb = ((left_wrist[0] - bar_highest_point[0])**2 + (left_wrist[1] - bar_highest_point[1])**2 )**0.5
    # didtance between right wrist and bar. (unit : pixel)
    dbrwb = ((right_wrist[0] - bar_highest_point[0])**2 + (right_wrist[1] - bar_highest_point[1])**2 )**0.5
    points_of_human = len(human_mask[0])
    
    num_of_over_bar = 0
    
    for i in human_mask[0]:
        if i[1] < bar_highest_point[1]:
            num_of_over_bar+=1
            
    '''
    "Human over bar" and "hand-bar distance long enough" 
    '''
    if num_of_over_bar / points_of_human > 0.95 and dblwb > handoff_radius and dbrwb > handoff_radius:
        return True
    else:
        return False


def getBodyAngle(pointlist):
    """
    input a list which have 3 points
    [(hip),(shoulder),(knee)]
    The maximum bending angle that a person can achieve is 0~270 degrees
    
    """
    p1 = pointlist[0]
    p2 = pointlist[1]
    p3 = pointlist[2]
    temp = p1
    p1 = p2
    p2 = temp
    # Calculate the angle between the vectors (p1, p2) and (p3, p2)
    angle = math.atan2(p3[1]-p2[1], p3[0]-p2[0]) - math.atan2(p1[1]-p2[1], p1[0]-p2[0])
    angle = math.degrees(angle)
    
    return angle+360 if angle < 0 else angle

def getGradient(pt1,pt2):
    return (pt2[1]-pt1[1]) / (pt2[0]-pt1[0])
    
def getAngle(pointlist):
    """
    input a list which have 3 points
    two kinds of situation:
    1. calculate angle from Human_Com and center bar
        first point be axis
        clockwise => ang > 0
        counterclockwise => ang < 0
    """

    pt1,pt2,pt3 = pointlist
    
    m1 = getGradient(pt1, pt2)
    m2 = getGradient(pt1, pt3)
    
    angR =math.atan((m2-m1)/(1+(m2*m1)))
    
    angD = (math.degrees(angR))
    return -angD



class Ui_MainWindow(QMainWindow):        
    def setupUi(self, MainWindow):
        #
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1396, 821)
        
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setLayoutDirection(QtCore.Qt.LeftToRight)
        
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        
        self.button_widget = QtWidgets.QWidget(self.centralwidget)
        self.button_widget.setEnabled(True)
        self.button_widget.setObjectName("button_widget")
        
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.button_widget)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        
        self.Upload_video = QtWidgets.QPushButton(self.button_widget)
        self.Upload_video.setObjectName("Upload_video")
        self.horizontalLayout_2.addWidget(self.Upload_video)
        
        
        self.Use_camera = QtWidgets.QPushButton(self.button_widget)
        self.Use_camera.setObjectName("Use_camera")
        self.horizontalLayout_2.addWidget(self.Use_camera)
        
        spacerItem = QtWidgets.QSpacerItem(60, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem)
        
        self.left_one_frame = QtWidgets.QPushButton(self.button_widget)
        self.left_one_frame.setObjectName("left_one_frame")
        self.horizontalLayout_2.addWidget(self.left_one_frame)
        
        self.right_one_frame = QtWidgets.QPushButton(self.button_widget)
        self.right_one_frame.setObjectName("right_one_frame")
        self.horizontalLayout_2.addWidget(self.right_one_frame)
        
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem1)
        
        self.playBtn = QtWidgets.QPushButton(self.button_widget)
        self.playBtn.setObjectName("playBtn")
        self.horizontalLayout_2.addWidget(self.playBtn)
        
        self.stopBtn = QtWidgets.QPushButton(self.button_widget)
        self.stopBtn.setObjectName("stopBtn")
        self.horizontalLayout_2.addWidget(self.stopBtn)
        
        self.verticalLayout.addWidget(self.button_widget)
        
        self.main_canvas = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.main_canvas.sizePolicy().hasHeightForWidth())
        self.main_canvas.setSizePolicy(sizePolicy)
        self.main_canvas.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.main_canvas.setAlignment(QtCore.Qt.AlignCenter)
        self.main_canvas.setObjectName("main_canvas")
        self.verticalLayout.addWidget(self.main_canvas)
        
        #進度條layout
        self.video_progress = QtWidgets.QWidget(self.centralwidget)
        self.video_progress.setObjectName("video_progress")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.video_progress)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.tl_slider = QtWidgets.QSlider(self.video_progress)
        self.tl_slider.setOrientation(QtCore.Qt.Horizontal)
        self.tl_slider.setObjectName("tl_slider")
        self.horizontalLayout_3.addWidget(self.tl_slider)
        spacerItem2 = QtWidgets.QSpacerItem(50, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem2)
        self.position_label = QtWidgets.QLabel(self.video_progress)
        self.position_label.setObjectName("position_label")
        self.horizontalLayout_3.addWidget(self.position_label)
        self.verticalLayout.addWidget(self.video_progress)
        
        self.widget_3 = QtWidgets.QWidget(self.centralwidget)
        self.widget_3.setObjectName("widget_3")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.widget_3)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        
        self.athelete_title = QtWidgets.QLabel(self.widget_3)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.athelete_title.setFont(font)
        self.athelete_title.setMouseTracking(False)
        self.athelete_title.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.athelete_title.setObjectName("athelete_title")
        self.horizontalLayout_4.addWidget(self.athelete_title)
        
        self.athelete_title_2 = QtWidgets.QLabel(self.widget_3)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.athelete_title_2.setFont(font)
        self.athelete_title_2.setMouseTracking(False)
        self.athelete_title_2.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.athelete_title_2.setObjectName("athelete_title_2")
        self.horizontalLayout_4.addWidget(self.athelete_title_2, 0, QtCore.Qt.AlignHCenter)
        
        self.verticalLayout.addWidget(self.widget_3)
        self.athelete_data = QtWidgets.QWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.athelete_data.sizePolicy().hasHeightForWidth())
        self.athelete_data.setSizePolicy(sizePolicy)
        self.athelete_data.setMaximumSize(QtCore.QSize(16777215, 360))
        self.athelete_data.setStyleSheet("background-color: rgb(192, 192, 192);")
        self.athelete_data.setObjectName("athelete_data")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.athelete_data)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.widget = QtWidgets.QWidget(self.athelete_data)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget.sizePolicy().hasHeightForWidth())
        self.widget.setSizePolicy(sizePolicy)
        self.widget.setObjectName("widget")
        self.left_body = QtWidgets.QVBoxLayout(self.widget)
        self.left_body.setObjectName("left_body")
        self.label_12 = QtWidgets.QLabel(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_12.sizePolicy().hasHeightForWidth())
        self.label_12.setSizePolicy(sizePolicy)
        self.label_12.setObjectName("label_12")
        self.left_body.addWidget(self.label_12)
        self.label = QtWidgets.QLabel(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setObjectName("label")
        self.left_body.addWidget(self.label)
        self.label_6 = QtWidgets.QLabel(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_6.sizePolicy().hasHeightForWidth())
        self.label_6.setSizePolicy(sizePolicy)
        self.label_6.setObjectName("label_6")
        self.left_body.addWidget(self.label_6)
        self.label_7 = QtWidgets.QLabel(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_7.sizePolicy().hasHeightForWidth())
        self.label_7.setSizePolicy(sizePolicy)
        self.label_7.setObjectName("label_7")
        self.left_body.addWidget(self.label_7)
        self.label_8 = QtWidgets.QLabel(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_8.sizePolicy().hasHeightForWidth())
        self.label_8.setSizePolicy(sizePolicy)
        self.label_8.setObjectName("label_8")
        self.left_body.addWidget(self.label_8)
        self.label_9 = QtWidgets.QLabel(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_9.sizePolicy().hasHeightForWidth())
        self.label_9.setSizePolicy(sizePolicy)
        self.label_9.setObjectName("label_9")
        self.left_body.addWidget(self.label_9)
        self.label_10 = QtWidgets.QLabel(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_10.sizePolicy().hasHeightForWidth())
        self.label_10.setSizePolicy(sizePolicy)
        self.label_10.setObjectName("label_10")
        self.left_body.addWidget(self.label_10)
        self.label_11 = QtWidgets.QLabel(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_11.sizePolicy().hasHeightForWidth())
        self.label_11.setSizePolicy(sizePolicy)
        self.label_11.setObjectName("label_11")
        self.left_body.addWidget(self.label_11)
        self.horizontalLayout.addWidget(self.widget)
        self.widget_2 = QtWidgets.QWidget(self.athelete_data)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget_2.sizePolicy().hasHeightForWidth())
        self.widget_2.setSizePolicy(sizePolicy)
        self.widget_2.setObjectName("widget_2")
        self.left_body_acc = QtWidgets.QVBoxLayout(self.widget_2)
        self.left_body_acc.setObjectName("left_body_acc")
        self.l_eye_acc = QtWidgets.QTextEdit(self.widget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.l_eye_acc.sizePolicy().hasHeightForWidth())
        self.l_eye_acc.setSizePolicy(sizePolicy)
        self.l_eye_acc.setMaximumSize(QtCore.QSize(80, 16777215))
        self.l_eye_acc.setObjectName("l_eye_acc")
        self.left_body_acc.addWidget(self.l_eye_acc)
        self.l_ear_acc = QtWidgets.QTextEdit(self.widget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.l_ear_acc.sizePolicy().hasHeightForWidth())
        self.l_ear_acc.setSizePolicy(sizePolicy)
        self.l_ear_acc.setMaximumSize(QtCore.QSize(80, 16777215))
        self.l_ear_acc.setObjectName("l_ear_acc")
        self.left_body_acc.addWidget(self.l_ear_acc)
        self.l_shoulder_acc = QtWidgets.QTextEdit(self.widget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.l_shoulder_acc.sizePolicy().hasHeightForWidth())
        self.l_shoulder_acc.setSizePolicy(sizePolicy)
        self.l_shoulder_acc.setMaximumSize(QtCore.QSize(80, 16777215))
        self.l_shoulder_acc.setObjectName("l_shoulder_acc")
        self.left_body_acc.addWidget(self.l_shoulder_acc)
        self.l_elbow_acc = QtWidgets.QTextEdit(self.widget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.l_elbow_acc.sizePolicy().hasHeightForWidth())
        self.l_elbow_acc.setSizePolicy(sizePolicy)
        self.l_elbow_acc.setMaximumSize(QtCore.QSize(80, 16777215))
        self.l_elbow_acc.setObjectName("l_elbow_acc")
        self.left_body_acc.addWidget(self.l_elbow_acc)
        self.l_wrist_acc = QtWidgets.QTextEdit(self.widget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.l_wrist_acc.sizePolicy().hasHeightForWidth())
        self.l_wrist_acc.setSizePolicy(sizePolicy)
        self.l_wrist_acc.setMaximumSize(QtCore.QSize(80, 16777215))
        self.l_wrist_acc.setObjectName("l_wrist_acc")
        self.left_body_acc.addWidget(self.l_wrist_acc)
        self.l_hip_acc = QtWidgets.QTextEdit(self.widget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.l_hip_acc.sizePolicy().hasHeightForWidth())
        self.l_hip_acc.setSizePolicy(sizePolicy)
        self.l_hip_acc.setMaximumSize(QtCore.QSize(80, 16777215))
        self.l_hip_acc.setObjectName("l_hip_acc")
        self.left_body_acc.addWidget(self.l_hip_acc)
        self.l_knee_acc = QtWidgets.QTextEdit(self.widget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.l_knee_acc.sizePolicy().hasHeightForWidth())
        self.l_knee_acc.setSizePolicy(sizePolicy)
        self.l_knee_acc.setMaximumSize(QtCore.QSize(80, 16777215))
        self.l_knee_acc.setObjectName("l_knee_acc")
        self.left_body_acc.addWidget(self.l_knee_acc)
        self.l_ankle_acc = QtWidgets.QTextEdit(self.widget_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.l_ankle_acc.sizePolicy().hasHeightForWidth())
        self.l_ankle_acc.setSizePolicy(sizePolicy)
        self.l_ankle_acc.setMaximumSize(QtCore.QSize(80, 16777215))
        self.l_ankle_acc.setObjectName("l_ankle_acc")
        self.left_body_acc.addWidget(self.l_ankle_acc)
        self.horizontalLayout.addWidget(self.widget_2)
        self.widget1 = QtWidgets.QWidget(self.athelete_data)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget1.sizePolicy().hasHeightForWidth())
        self.widget1.setSizePolicy(sizePolicy)
        self.widget1.setObjectName("widget1")
        self.right_body = QtWidgets.QVBoxLayout(self.widget1)
        self.right_body.setObjectName("right_body")
        self.label_13 = QtWidgets.QLabel(self.widget1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_13.sizePolicy().hasHeightForWidth())
        self.label_13.setSizePolicy(sizePolicy)
        self.label_13.setObjectName("label_13")
        self.right_body.addWidget(self.label_13)
        self.label_14 = QtWidgets.QLabel(self.widget1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_14.sizePolicy().hasHeightForWidth())
        self.label_14.setSizePolicy(sizePolicy)
        self.label_14.setObjectName("label_14")
        self.right_body.addWidget(self.label_14)
        self.label_15 = QtWidgets.QLabel(self.widget1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_15.sizePolicy().hasHeightForWidth())
        self.label_15.setSizePolicy(sizePolicy)
        self.label_15.setObjectName("label_15")
        self.right_body.addWidget(self.label_15)
        self.label_16 = QtWidgets.QLabel(self.widget1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_16.sizePolicy().hasHeightForWidth())
        self.label_16.setSizePolicy(sizePolicy)
        self.label_16.setObjectName("label_16")
        self.right_body.addWidget(self.label_16)
        self.label_17 = QtWidgets.QLabel(self.widget1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_17.sizePolicy().hasHeightForWidth())
        self.label_17.setSizePolicy(sizePolicy)
        self.label_17.setObjectName("label_17")
        self.right_body.addWidget(self.label_17)
        self.label_18 = QtWidgets.QLabel(self.widget1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_18.sizePolicy().hasHeightForWidth())
        self.label_18.setSizePolicy(sizePolicy)
        self.label_18.setObjectName("label_18")
        self.right_body.addWidget(self.label_18)
        self.label_19 = QtWidgets.QLabel(self.widget1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_19.sizePolicy().hasHeightForWidth())
        self.label_19.setSizePolicy(sizePolicy)
        self.label_19.setObjectName("label_19")
        self.right_body.addWidget(self.label_19)
        self.label_20 = QtWidgets.QLabel(self.widget1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_20.sizePolicy().hasHeightForWidth())
        self.label_20.setSizePolicy(sizePolicy)
        self.label_20.setObjectName("label_20")
        self.right_body.addWidget(self.label_20)
        self.horizontalLayout.addWidget(self.widget1)
        self.widget2 = QtWidgets.QWidget(self.athelete_data)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget2.sizePolicy().hasHeightForWidth())
        self.widget2.setSizePolicy(sizePolicy)
        self.widget2.setObjectName("widget2")
        self.right_body_acc = QtWidgets.QVBoxLayout(self.widget2)
        self.right_body_acc.setObjectName("right_body_acc")
        self.r_eye_acc = QtWidgets.QTextEdit(self.widget2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.r_eye_acc.sizePolicy().hasHeightForWidth())
        self.r_eye_acc.setSizePolicy(sizePolicy)
        self.r_eye_acc.setMaximumSize(QtCore.QSize(80, 16777215))
        self.r_eye_acc.setObjectName("r_eye_acc")
        self.right_body_acc.addWidget(self.r_eye_acc)
        self.r_ear_acc = QtWidgets.QTextEdit(self.widget2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.r_ear_acc.sizePolicy().hasHeightForWidth())
        self.r_ear_acc.setSizePolicy(sizePolicy)
        self.r_ear_acc.setMaximumSize(QtCore.QSize(80, 16777215))
        self.r_ear_acc.setObjectName("r_ear_acc")
        self.right_body_acc.addWidget(self.r_ear_acc)
        self.r_shoulder_acc = QtWidgets.QTextEdit(self.widget2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.r_shoulder_acc.sizePolicy().hasHeightForWidth())
        self.r_shoulder_acc.setSizePolicy(sizePolicy)
        self.r_shoulder_acc.setMaximumSize(QtCore.QSize(80, 16777215))
        self.r_shoulder_acc.setObjectName("r_shoulder_acc")
        self.right_body_acc.addWidget(self.r_shoulder_acc)
        self.r_elbow_acc = QtWidgets.QTextEdit(self.widget2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.r_elbow_acc.sizePolicy().hasHeightForWidth())
        self.r_elbow_acc.setSizePolicy(sizePolicy)
        self.r_elbow_acc.setMaximumSize(QtCore.QSize(80, 16777215))
        self.r_elbow_acc.setObjectName("r_elbow_acc")
        self.right_body_acc.addWidget(self.r_elbow_acc)
        self.r_wrist_acc = QtWidgets.QTextEdit(self.widget2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.r_wrist_acc.sizePolicy().hasHeightForWidth())
        self.r_wrist_acc.setSizePolicy(sizePolicy)
        self.r_wrist_acc.setMaximumSize(QtCore.QSize(80, 16777215))
        self.r_wrist_acc.setObjectName("r_wrist_acc")
        self.right_body_acc.addWidget(self.r_wrist_acc)
        self.r_hip_acc = QtWidgets.QTextEdit(self.widget2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.r_hip_acc.sizePolicy().hasHeightForWidth())
        self.r_hip_acc.setSizePolicy(sizePolicy)
        self.r_hip_acc.setMaximumSize(QtCore.QSize(80, 16777215))
        self.r_hip_acc.setObjectName("r_hip_acc")
        self.right_body_acc.addWidget(self.r_hip_acc)
        self.r_knee_acc = QtWidgets.QTextEdit(self.widget2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.r_knee_acc.sizePolicy().hasHeightForWidth())
        self.r_knee_acc.setSizePolicy(sizePolicy)
        self.r_knee_acc.setMaximumSize(QtCore.QSize(80, 16777215))
        self.r_knee_acc.setObjectName("r_knee_acc")
        self.right_body_acc.addWidget(self.r_knee_acc)
        self.r_ankle_acc = QtWidgets.QTextEdit(self.widget2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.r_ankle_acc.sizePolicy().hasHeightForWidth())
        self.r_ankle_acc.setSizePolicy(sizePolicy)
        self.r_ankle_acc.setMaximumSize(QtCore.QSize(80, 16777215))
        self.r_ankle_acc.setObjectName("r_ankle_acc")
        self.right_body_acc.addWidget(self.r_ankle_acc)
        
        self.horizontalLayout.addWidget(self.widget2)
        self.sensors_pg = PlotWidget(self.athelete_data)
        self.sensors_pg.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sensors_pg.sizePolicy().hasHeightForWidth())
        self.sensors_pg.setSizePolicy(sizePolicy)
        self.sensors_pg.setMinimumSize(QtCore.QSize(0, 300))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.sensors_pg.setFont(font)
        self.sensors_pg.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.sensors_pg.setStyleSheet("background-color: rgb(255, 255, 0);")
        self.sensors_pg.setObjectName("sensors_pg")
        self.horizontalLayout.addWidget(self.sensors_pg, 0, QtCore.Qt.AlignBottom)
        self.verticalLayout.addWidget(self.athelete_data)
        self.horizontalLayout_5.addLayout(self.verticalLayout)
        self.right_layout = QtWidgets.QVBoxLayout()
        self.right_layout.setObjectName("right_layout")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.right_layout.addWidget(self.label_2, 0, QtCore.Qt.AlignHCenter)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.right_layout.addWidget(self.label_3, 0, QtCore.Qt.AlignHCenter)
        self.height_pg = PlotWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.height_pg.sizePolicy().hasHeightForWidth())
        self.height_pg.setSizePolicy(sizePolicy)
        self.height_pg.setStyleSheet("background-color: rgb(255, 0, 255);")
        self.height_pg.setObjectName("height_pg")
        self.right_layout.addWidget(self.height_pg)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_4.sizePolicy().hasHeightForWidth())
        self.label_4.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.right_layout.addWidget(self.label_4, 0, QtCore.Qt.AlignHCenter)
        self.twist_pg = PlotWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.twist_pg.sizePolicy().hasHeightForWidth())
        self.twist_pg.setSizePolicy(sizePolicy)
        self.twist_pg.setStyleSheet("background-color: rgb(0, 255, 0);")
        self.twist_pg.setObjectName("twist_pg")
        self.right_layout.addWidget(self.twist_pg)
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.right_layout.addWidget(self.label_5, 0, QtCore.Qt.AlignHCenter)
        self.hand_off_pg = PlotWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.hand_off_pg.sizePolicy().hasHeightForWidth())
        self.hand_off_pg.setSizePolicy(sizePolicy)
        self.hand_off_pg.setMinimumSize(QtCore.QSize(0, 0))
        self.hand_off_pg.setStyleSheet("background-color: rgb(0, 0, 255);")
        self.hand_off_pg.setObjectName("hand_off_pg")
        self.right_layout.addWidget(self.hand_off_pg)
        self.horizontalLayout_5.addLayout(self.right_layout)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menuBar = QtWidgets.QMenuBar(MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 1396, 20))
        self.menuBar.setObjectName("menuBar")
        self.menu = QtWidgets.QMenu(self.menuBar)
        self.menu.setObjectName("menu")
        self.menuWindows = QtWidgets.QMenu(self.menuBar)
        self.menuWindows.setObjectName("menuWindows")
        self.menuExit = QtWidgets.QMenu(self.menuBar)
        self.menuExit.setObjectName("menuExit")
        MainWindow.setMenuBar(self.menuBar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.actionMivos = QtWidgets.QAction(MainWindow)
        self.actionMivos.setObjectName("actionMivos")
        self.actionMotion_Analysis = QtWidgets.QAction(MainWindow)
        self.actionMotion_Analysis.setObjectName("actionMotion_Analysis")
        self.menuWindows.addAction(self.actionMivos)
        self.menuWindows.addAction(self.actionMotion_Analysis)
        self.menuBar.addAction(self.menu.menuAction())
        self.menuBar.addAction(self.menuWindows.menuAction())
        self.menuBar.addAction(self.menuExit.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        # start frame
        self.start_frame = 0
        self.end_frame = 0
        
        # human center list
        self.human_center_list = []
        self.human_feet = []
        
        # create Upload_video button
        self.Upload_video.clicked.connect(self.open_file)

        # Main canvas -> QLabel definition
        self.main_canvas.setSizePolicy(QSizePolicy.Expanding,
                QSizePolicy.Expanding)
        self.main_canvas.setAlignment(Qt.AlignCenter)
        # self.main_canvas.setMinimumSize(100, 100)
        self.main_canvas.setMouseTracking(True) # Required for all-time tracking

        # timeline slider
        self.tl_slider.valueChanged.connect(self.tl_slide)  # 只要被拖拉，或是被set_value就會執行self.tl_slide
        self.tl_slider.setTickPosition(QSlider.TicksBelow)
        
        # some buttons
        self.playBtn.setEnabled(False)
        self.playBtn.clicked.connect(self.on_play)

        # playing flag
        self.playing_flag = False
        self.curr_frame_dirty = False

        # Create label to display current position
        self.position_label.setText('Position: 0')

        # 紀錄播放到的幀數
        self.cursur = 0
        
        # button
        self.right_one_frame.setEnabled(False)
        self.right_one_frame.clicked.connect(self.on_next_frame)
        self.left_one_frame.setEnabled(False)
        self.left_one_frame.clicked.connect(self.on_prev_frame)
        

        # motion/action data
        self.mask_data = defaultlist()    # mask for every frame(Image)
        self.human_mask_data = defaultdict(list) # {num of frame :  points of mask (coordinate)}  
        self.horizontal_bar_points = defaultlist()  # [highest point(row,col) , lowest point] of mask of bar (coordinate)
        self.pose_data = defaultlist()    # keypoint bbox for every frame
        self.twist_data = defaultlist()   # speed of loop motion of every frame
        
        # cursur timer
        self.timer = QTimer()
        self.timer.setSingleShot(False)
        self.timer.timeout.connect(self.on_time)

        #height pg
        self.gt_height_data = []
        self.head_height_data = [] # butt height of every frame
        self.count=0
        self.height_pg.setLabel('bottom','Time','s')
        self.height_pg.showGrid(x = True, y = True, alpha = 1) 
        # self.gt_height_curve = self.height_pg.plot(self.gt_height_data,pen=(255,0,0)) # 搭配 setData for indicate
        # self.height_curve = self.height_pg.plot(self.head_height_data) # 搭配 setData for indicate
        self.height_pg_timer = pg.QtCore.QTimer()
        self.height_pg_timer.timeout.connect(self.update_height)
    
        # twist pg

        self.gt_augular_speed_data = []
        self.twist_data = [0]                                          # no twist speed in first frame 
        self.twist_pg.showGrid(x = True, y = True, alpha = 1) 
        self.twist_pg.setLabel('bottom','Time','s')
        # self.twist_gt_curve1 = self.twist_pg.plot(self.gt_augular_speed_data,pen=(255,0,0)) # for indicate

        # self.twist_curve1 = self.twist_pg.plot(self.twist_data)                   # for indicate
        self.height_pg.setLabel('left','meter(m)')
        self.twist_pg_timer = pg.QtCore.QTimer()
        self.twist_pg_timer.timeout.connect(self.update_twist)
        
        # handoff pg
        self.handoff_data = defaultlist()    # true if hands on bars , false if hands not on bars for every frame.
        self.hand_off_pg.setLabel('bottom','Time','s')
        self.hand_off_pg.showGrid(x = True, y = True, alpha = 1)
        self.hand_off_curve = self.hand_off_pg.plot(self.handoff_data) # for indicate
        self.hand_off_timer = pg.QtCore.QTimer()
        self.hand_off_timer.timeout.connect(self.update_hand_off)

        # sensor pg

        # self.sensors_data =  np.random.rand(300)
        self.sensors_pg.setLabel('bottom','Time','s')
        self.sensors_pg.showGrid(x = True, y = True, alpha = 1)
        # self.sensors_curve = self.sensors_pg.plot(self.sensors_data)

        self.imu_pg_timer = pg.QtCore.QTimer()
        self.imu_pg_timer.timeout.connect(self.update_imu)
    
    def open_file(self):
        self.head_height_data = []
        self.hand_coordinate = []

        self.gt_augular_speed_data = []
        self.twist_data = [0]                                          # no twist speed in first frame 
        self.hip_angle_data=[]
        self.handoff_data = []
        self.head_coord_data = []

        global imu_data_pd,imu_data_gyrox,imu_data_gyroy,imu_data_gyroz
        global imu_data_accx,imu_data_accy,imu_data_accz
        global imu_data_haccx,imu_data_haccy,imu_data_haccz, imu_data_len
        global imu_data_left,imu_data_right
        imu_data_left = 0
        imu_data_right = 1200

        self.filename, _ = QFileDialog.getOpenFileName(self, "Open Video")

        print('video_name:', self.filename)
        # pdb.set_trace()
        video_name = self.filename.split('x')[-1]
        video_form = video_name.split('.')[1]
        self.video_name = video_name.split('.')[0]
        video_mask = self.video_name.split('/')[-1]
        video_mask = video_mask.replace('vis_','')
        self.mask_path = os.path.join('/home/m11002163/lab_project/ViTPose-1/workspace/',video_mask, "masks/") 
        self.motion_json_path = os.path.join('/home/m11002163/lab_project/ViTPose-1/vis_results/',video_mask+'.'+video_form+'.json')


        # self.gt_head_path = os.path.join('/home/m11002163/lab_project/ViTPose-1/ground_truth/',video_mask+'_head.xlsx')
        # self.gt_belly_path = os.path.join('/home/m11002163/ViTPose/ground_truth/',video_mask+'_belly.xlsx')


        # read results of pose estimation.
        with open(self.motion_json_path) as f:    # 讀取每一幀的 pose keypoint 和 bbox(左上、右下) 的座標
            self.pose_data = json.load(f)
        
        # load mask to self.mask_data and find human mask
        self.load_mask()
    
        
        # load ground truth of parameter:
        # gt head:
        # if os.path.isfile(self.gt_head_path):
        #     excel_data = pd.read_excel(self.gt_head_path)
        #     excel_data = excel_data.tail(-1) # remove first row
        #     excel_data.set_axis( ['step','frame','time','pixelx','pixely','x','y','r','theta_r','theta','w','wa'], axis='columns', inplace=True)
        #     self.gt_height_data = np.array(excel_data['y'].to_numpy(), dtype=float)
        # else:
        #     self.gt_height_data = None
        #     print('no head ground truth')
        # # pdb.set_trace()
        # # gt belly:
        # if os.path.isfile(self.gt_belly_path):
        #     belly_data = pd.read_excel(self.gt_belly_path)
        #     belly_data = belly_data.tail(-1) # remove first row
        #     belly_data.set_axis( ['step','frame','time','pixelx','pixely','x','y','r','theta_r','theta','w','wa'], axis='columns', inplace=True)

        #     self.gt_augular_speed_data = np.array(belly_data['w'].to_numpy(), dtype=float) #　get angular speeds
        # else:
        #     self.gt_augular_speed_data = None
        #     print('no belly ground truth')


        # imu_data_pd = pd.read_csv(self.filename+'.csv')
        # imu_data_gyrox = list(imu_data_pd['GyroX'])
        # imu_data_gyroy = list(imu_data_pd['GyroY'])
        # imu_data_gyroz = list(imu_data_pd['GyroZ'])
        # imu_data_accx  = list(imu_data_pd['AccX'])
        # imu_data_accy  = list(imu_data_pd['AccY'])
        # imu_data_accz  = list(imu_data_pd['AccZ'])
        # imu_data_haccx = list(imu_data_pd['HAccX'])
        # imu_data_haccy = list(imu_data_pd['HAccY'])
        # imu_data_haccz = list(imu_data_pd['HAccZ'])
        # imu_data_len = len(imu_data_gyrox)

        # self.json_file = self.filename+'.json'
        # self.jsonfile = self.json_file.split('/')[-1]
        # self.jsonfile = self.jsonfile.replace('AlphaPose_', '')

        # read all video and save every frame in stack
        stream = cv2.VideoCapture(self.filename)                    # 影像路徑
        self.num_frames = int(stream.get(cv2.CAP_PROP_FRAME_COUNT)) # 查看多少個frame
        self.fourcc = int(stream.get(cv2.CAP_PROP_FOURCC))          # fourcc:  編碼的種類 EX:(MPEG4 or H264)
        self.fps = stream.get(cv2.CAP_PROP_FPS)                     # 查看 FPS
        print('fps:',self.fps)
        print('num_of_frames:',self.num_frames)
        self.w = int(stream.get(cv2.CAP_PROP_FRAME_WIDTH))          # 影片寬
        self.h = int(stream.get(cv2.CAP_PROP_FRAME_HEIGHT))         # 影片高

        video_frame = []
        counter = 0

        # center bar coord 
        # TODO: 單槓中心點的抓取方式，利用演算法 or 手動提供。
        center_bar = np.array([(self.horizontal_bar_points[0][0] + self.horizontal_bar_points[1][0]) / 2 , self.horizontal_bar_points[0][1] + 17]) # 微調單槓中心點
        
        # 2.8m / pixel_height_of_bar
        pixel_height_ratio = 2.8 / (center_bar[1] - self.horizontal_bar_points[1][1]) 


        # human center coord in start frame (butt center)
        human_center = np.array([(self.pose_data[counter]['keypoints'][33] + self.pose_data[counter]['keypoints'][36]) / 2,
                        (self.pose_data[counter]['keypoints'][34] + self.pose_data[counter]['keypoints'][37]) / 2])
        
        # distance between center bar and hip
        # radius = (center_bar**2 - human_center**2)**0.5
        
        # 3 points to calculate angle
        pointlist = [center_bar,human_center,np.array([])]
        delta_theta_list = []
        delta_t = 1 / self.fps
        # calculate motion parameter from every frame
        while(stream.isOpened()):
            _, frame = stream.read()
            if frame is None:
                break
            try:
                # frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                video_frame.append(frame)
                # height of gymnast (這裡座標要改成由左下(左下)往右上)，因為高度是由下往上
                center_head_x = (self.pose_data[counter]['keypoints'][3]+self.pose_data[counter]['keypoints'][6]+self.pose_data[counter]['keypoints'][9]+self.pose_data[counter]['keypoints'][12]) / 4
                center_head_y = (self.pose_data[counter]['keypoints'][4]+self.pose_data[counter]['keypoints'][7]+self.pose_data[counter]['keypoints'][10]+self.pose_data[counter]['keypoints'][13]) / 4
                # pdb.set_trace()
                self.head_height_data.append(( center_head_y - center_bar[1] ) * pixel_height_ratio)

                self.hand_coordinate.append([self.pose_data[counter]['keypoints'][27:29],self.pose_data[counter]['keypoints'][30:32]]) # wrist_coordinate
                
                self.human_center_list.append(np.array(np.array([(self.pose_data[counter]['keypoints'][33] + self.pose_data[counter]['keypoints'][36]) / 2,
                                (self.pose_data[counter]['keypoints'][34] + self.pose_data[counter]['keypoints'][37]) / 2]))
                )
                self.human_feet.append(np.array(np.array([(self.pose_data[counter]['keypoints'][45] + self.pose_data[counter]['keypoints'][48]) / 2,
                                (self.pose_data[counter]['keypoints'][46] + self.pose_data[counter]['keypoints'][49]) / 2]))
                )


                self.hip_angle_data.append(getBodyAngle([(self.pose_data[counter]['keypoints'][36],self.pose_data[counter]['keypoints'][37]) ,(self.pose_data[counter]['keypoints'][18],self.pose_data[counter]['keypoints'][19]) ,(self.pose_data[counter]['keypoints'][42],self.pose_data[counter]['keypoints'][43])]))

                
                if check_handoff(self.horizontal_bar_points,[self.pose_data[counter]['keypoints'][27:29],self.pose_data[counter]['keypoints'][30:32]],self.human_mask_data[counter]): # check if handoff
                    self.handoff_data.append(1)  # handoff
                    counter +=1
                    self.twist_data.append(0)    # if human not on bar, then no speed
                else:
                    assert "sth wrong when process data"
                    self.handoff_data.append(0)  # not handoff
                    # first frame have no twist speed, so just record the next human center.
                    if len(pointlist[2]) == 0:
                        counter +=1
                        # add next human center to pointlist
                        pointlist[2] = np.array(np.array([(self.pose_data[counter]['keypoints'][33] + self.pose_data[counter]['keypoints'][36]) / 2,
                                        (self.pose_data[counter]['keypoints'][34] + self.pose_data[counter]['keypoints'][37]) / 2]))
                        continue
                    # pdb.set_trace()
                    # get angle.
                    delta_angle = getAngle(pointlist)
                    delta_theta_list.append(delta_angle)
                    
                    if len(delta_theta_list) == 2:
                        angular_speed = (delta_theta_list[0] + delta_theta_list[1] / 2) / delta_t
                        self.twist_data.append(angular_speed)
                        delta_theta_list.pop(0)
                        
                    if counter==self.num_frames - 1:
                        self.twist_data.append(0)
                    
                    counter +=1
                    pointlist[1] = pointlist[2]
                    # add next human center to pointlist
                    pointlist[2] = np.array(np.array([(self.pose_data[counter]['keypoints'][33] + self.pose_data[counter]['keypoints'][36]) / 2,
                                    (self.pose_data[counter]['keypoints'][34] + self.pose_data[counter]['keypoints'][37]) / 2]))
            except:
                video_frame.append(frame)

                print('sth error')

                assert "something wrong in data process"
                # break
        # pdb.set_trace()
        self.frames = np.stack(video_frame, axis=0)               # self.frames 儲存影片的所有幀

        self.position_label.setText('Position:0/{}'.format(self.num_frames))
        # bytesPerLine = 3 * self.w

        # set timeline slider
        self.tl_slider.setMinimum(0)
        self.tl_slider.setMaximum(self.num_frames-1)
        self.tl_slider.setValue(0)
        self.tl_slider.setTickPosition(QSlider.TicksBelow)
        self.tl_slider.setTickInterval(1)
        self.playBtn.setEnabled(True)

        
        self.right_one_frame.setEnabled(True)
        self.left_one_frame.setEnabled(True)
        
        self.cursur = 0
        self.show_current_frame()


        # print('mae:',mae(self.gt_height_data,self.head_height_data))
        # pdb.set_trace()
        
        # find peak of height (prominence: remove fake peak value)
        self.local_max_height_point, _ = find_peaks(self.head_height_data,prominence=2) 
        

        # gui timer 再讀完影片之後才啟動
        self.height_pg_timer.start() # 50ms
        self.twist_pg_timer.start() # 50ms
        self.hand_off_timer.start() # 50ms

        self.imu_pg_timer.start() # 2ms  imu: 400Hz


    def update_interact_vis(self):
        frame = self.frames[self.cursur]
        if frame is not None:
            counter = 0
            # pdb.set_trace()
            if self.cursur < self.fps * 3:
                for i in self.human_center_list:
                    cv2.circle(frame,(int(i[0]) , int(i[1])), 2, (0,0,255), 2)
                    counter += 1
                    if counter >= self.cursur:
                        break
                counter = 0
                for j in self.human_feet:
                    cv2.circle(frame,(int(j[0]) , int(j[1])), 2, (255,0,0), 2)
                    counter += 1
                    if counter >= self.cursur:
                        break
            else:
                # pdb.set_trace()
                center_list = self.human_center_list[self.cursur-(int(self.fps) * 3) : self.cursur]
                feet_list = self.human_feet[self.cursur-(int(self.fps) * 3) : self.cursur]
                for i in center_list: 
                    cv2.circle(frame,(int(i[0]) , int(i[1])), 2, (0,0,255), 2)
                for j in feet_list:
                    cv2.circle(frame,(int(j[0]) , int(j[1])), 2, (255,0,0), 2)

            cv2.line(frame, (0, self.horizontal_bar_points[0][1]), (self.w, self.horizontal_bar_points[0][1]), (0, 255, 0), thickness=1)
            cv2.circle(frame,((self.horizontal_bar_points[0][0] + self.horizontal_bar_points[1][0])//2 , self.horizontal_bar_points[0][1]+5), handoff_radius, (255,0,0), 2)
            image = QImage(frame, frame.shape[1], frame.shape[0], QImage.Format_RGB888).rgbSwapped()
            # self.setPixmap(QPixmap.fromImage(image))  #QLabel
            self.main_canvas.setPixmap(QPixmap(image.scaled(self.main_canvas.size(),    # canvas 的顯示
                Qt.KeepAspectRatio, Qt.FastTransformation)))
        # 播放的時候，也要更新slider cursur
        self.tl_slider.setValue(self.cursur)
    
    def tl_slide(self): # 只要slider(cursur)一改變，就要改變顯示的幀數，不管事正常播放或是拖拉
        self.cursur = self.tl_slider.value() #  改變顯示的幀數
        self.show_current_frame()            #  改變顯示的frame
        self.show_keypoint_position()        #  改變顯示的keypoint

    def show_current_frame(self):
        # Re-compute overlay and show the image
        # self.compose_current_im()
        self.update_interact_vis()
        self.position_label.setText('Position:{frame}/{all_frames}'.format(frame=int(self.cursur),all_frames=self.num_frames))
        self.tl_slider.setValue(self.cursur)
    
    def show_keypoint_position(self):
        l_eye_x,l_eye_y = self.pose_data[self.cursur]['keypoints'][3:5]
        l_eye_x,l_eye_y = int(l_eye_x),int(l_eye_y)
        str_ = f"{l_eye_x},{l_eye_y}"
        self.l_eye_acc.setText(str_)
        r_eye_x,r_eye_y = self.pose_data[self.cursur]['keypoints'][6:8]
        r_eye_x,r_eye_y = int(r_eye_x),int(r_eye_y)
        str_ = f"{r_eye_x},{r_eye_y}"
        self.r_eye_acc.setText(str_)
        
        l_ear_x,l_ear_y = self.pose_data[self.cursur]['keypoints'][9:11]
        l_ear_x,l_ear_y = int(l_ear_x),int(l_ear_y)
        str_ = f"{l_ear_x},{l_ear_y}"
        self.l_ear_acc.setText(str_)
        r_ear_x,r_ear_y = self.pose_data[self.cursur]['keypoints'][12:14]
        r_ear_x,r_ear_y = int(r_ear_x),int(r_ear_y)
        str_ = f"{r_ear_x},{r_ear_y}"
        self.r_ear_acc.setText(str_)
        
        l_shoulder_x,l_shoulder_y = self.pose_data[self.cursur]['keypoints'][15:17]
        l_shoulder_x,l_shoulder_y = int(l_shoulder_x),int(l_shoulder_y)
        str_ = f"{l_shoulder_x},{l_shoulder_y}"
        self.l_shoulder_acc.setText(str_)
        r_shoulder_x,r_shoulder_y = self.pose_data[self.cursur]['keypoints'][18:20]
        r_shoulder_x,r_shoulder_y = int(r_shoulder_x),int(r_shoulder_y)
        str_ = f"{r_shoulder_x},{r_shoulder_y}"
        self.r_shoulder_acc.setText(str_)
        
        l_elbow_x,l_elbow_y = self.pose_data[self.cursur]['keypoints'][21:23]
        l_elbow_x,l_elbow_y = int(l_elbow_x),int(l_elbow_y)
        str_ = f"{l_elbow_x},{l_elbow_y}"
        self.l_elbow_acc.setText(str_)
        r_elbow_x,r_elbow_y = self.pose_data[self.cursur]['keypoints'][24:26]
        r_elbow_x,r_elbow_y = int(r_elbow_x),int(r_elbow_y)
        str_ = f"{r_elbow_x},{r_elbow_y}"
        self.r_elbow_acc.setText(str_)
        
        l_wrist_x,l_wrist_y = self.pose_data[self.cursur]['keypoints'][27:29]
        l_wrist_x,l_wrist_y = int(l_wrist_x),int(l_wrist_y)
        str_ = f"{l_wrist_x},{l_wrist_y}"
        self.l_wrist_acc.setText(str_)
        r_wrist_x,r_wrist_y = self.pose_data[self.cursur]['keypoints'][30:32]
        r_wrist_x,r_wrist_y = int(r_wrist_x),int(r_wrist_y)
        str_ = f"{r_wrist_x},{r_wrist_y}"
        self.r_wrist_acc.setText(str_)
        
        l_hip_x,l_hip_y = self.pose_data[self.cursur]['keypoints'][33:35]
        l_hip_x,l_hip_y = int(l_hip_x),int(l_hip_y)
        str_ = f"{l_hip_x},{l_hip_y}"
        self.l_hip_acc.setText(str_)
        r_hip_x,r_hip_y = self.pose_data[self.cursur]['keypoints'][36:38]
        r_hip_x,r_hip_y = int(r_hip_x),int(r_hip_y)
        str_ = f"{r_hip_x},{r_hip_y}"
        self.r_hip_acc.setText(str_)
        
        l_knee_x,l_knee_y = self.pose_data[self.cursur]['keypoints'][39:41]
        l_knee_x,l_knee_y = int(l_knee_x),int(l_knee_y)
        str_ = f"{l_knee_x},{l_knee_y}"
        self.l_knee_acc.setText(str_)
        r_knee_x,r_knee_y = self.pose_data[self.cursur]['keypoints'][42:44]
        r_knee_x,r_knee_y = int(r_knee_x),int(r_knee_y)
        str_ = f"{r_knee_x},{r_knee_y}"
        self.r_knee_acc.setText(str_)
        
        l_ankle_x,l_ankle_y = self.pose_data[self.cursur]['keypoints'][45:47]
        l_ankle_x,l_ankle_y = int(l_ankle_x),int(l_ankle_y)
        str_ = f"{l_ankle_x},{l_ankle_y}"
        self.l_ankle_acc.setText(str_)
        r_ankle_x,r_ankle_y = self.pose_data[self.cursur]['keypoints'][48:50]
        r_ankle_x,r_ankle_y = int(r_ankle_x),int(r_ankle_y)
        str_ = f"{r_ankle_x},{r_ankle_y}"
        self.r_ankle_acc.setText(str_)
    
    def on_play(self):                 
        if self.timer.isActive():
            self.timer.stop()
        else:
            self.timer.start()   # timer 
            
    def on_time(self):                 # 更新 cursor
        self.cursur += 1
        if self.cursur > self.num_frames-1:
            self.cursur = 0
        self.tl_slider.setValue(self.cursur)
        
    def update_height(self):
        # pdb.set_trace()
        self.height_pg.clear()

        time = np.linspace(0.0, self.num_frames/self.fps, num=len(self.head_height_data))
        self.height_pg.plot(y = self.head_height_data,  x = time)
        self.height_pg.plot([time[self.cursur]],[self.head_height_data[self.cursur]],pen=(200,200,200), symbolBrush=(255,0,0), symbolPen='w')

        lr = pg.LinearRegionItem([1, 30], bounds=[0,100], movable=True)
        self.height_pg.addItem(lr)
        line = pg.InfiniteLine(angle=90, movable=True)
        self.height_pg.addItem(line)
        line.setBounds([0,200])


        if self.gt_height_data is not None:
            time2 = np.linspace(0.0, len(self.gt_height_data)/self.fps, num=len(self.gt_height_data))
            self.height_pg.plot(self.gt_height_data,pen=(255,0,0), x = time2)
            self.height_pg.plot([time2[self.cursur]],[self.gt_height_data[self.cursur]],pen=(200,200,200), symbolBrush=(0,255,0), symbolPen='w')
            

        # 隨時間更新Plot
        # data = self.head_height_data[self.cursur:self.cursur+int(self.num_frames/self.fps)]
        # self.height_curve.setData(data)
        # self.height_curve.setPos(self.cursur, 0)
        
        # if self.gt_height_data is not None:
        #     data2 = self.gt_height_data[self.cursur:self.cursur+int(self.num_frames/self.fps)]
        #     self.gt_height_curve.setData(data2)
        #     self.gt_height_curve.setPos(self.cursur, 0)

    def update_twist(self):
        # pdb.set_trace()

        self.twist_pg.clear()
        self.twist_pg.plot(self.twist_data)
        self.twist_pg.plot([self.cursur],[self.twist_data[self.cursur]],pen=(200,200,200), symbolBrush=(255,0,0), symbolPen='w')

        
        if self.gt_augular_speed_data is not None:
            self.twist_pg.plot(self.gt_augular_speed_data,pen=(255,0,0))
            self.twist_pg.plot([self.cursur],[self.gt_augular_speed_data[self.cursur]],pen=(200,200,200), symbolBrush=(0,255,0), symbolPen='w')

            
        # 隨時間更新Plot
        # data = self.twist_data[self.cursur:self.cursur+int(self.num_frames/self.fps)]
        # self.twist_curve1.setData(data)
        # self.twist_curve1.setPos(self.cursur, 0)
        

        # if self.gt_augular_speed_data is not None:
        #     data2 = self.gt_augular_speed_data[self.cursur:self.cursur+int(self.num_frames/self.fps)]

        #     self.twist_gt_curve1.setData(data2)
        #     self.twist_gt_curve1.setPos(self.cursur, 0)

        
    def update_hand_off(self):
        data = self.handoff_data[self.cursur:self.cursur+int(self.num_frames/self.fps)]
        self.hand_off_curve.setData(data)
        self.hand_off_curve.setPos(self.cursur, 0)
        

    def update_imu(self):

        # pdb.set_trace()
        self.sensors_pg.clear()
        self.sensors_pg.plot(self.hip_angle_data)
        self.sensors_pg.plot([self.cursur],[self.hip_angle_data[self.cursur]],pen=(200,200,200), symbolBrush=(255,0,0), symbolPen='w')
        
        # self.sensors_data[:-1] = self.sensors_data[1:]  # shift data in the array one sample left
        #                         # (see also: np.roll)
        # self.sensors_data[-1] = np.random.normal()
        # # print(len(self.data1))
        # self.sensors_curve.setData(self.sensors_data)

        # global imu_data_gyrox,imu_data_left,imu_data_right
        # if self.cursur > hand_on_frame:
        #     imu_data_left = int(self.cursur * (imu_data_len/self.num_frames)) - hand_on_frame
        #     imu_data_right = int(self.cursur * (imu_data_len/self.num_frames)) - hand_on_frame+1200
        #     self.gyrox_data = imu_data_gyrox[imu_data_left:imu_data_right]
        #     self.gyrox.setData(self.gyrox_data)

    def rand(self,n):
        data = np.random.random(n)
        data[int(n*0.1):int(n*0.13)] += .5
        data[int(n*0.18)] += 2
        data[int(n*0.1):int(n*0.13)] *= 5
        data[int(n*0.18)] *= 20
        data *= 1e-12
        return data, np.arange(n, n+len(data)) / float(n)
    
    def load_mask(self):
        fnames = sorted(glob.glob(os.path.join(self.mask_path, '*.jpg')))
        if len(fnames) == 0:
            fnames = sorted(glob.glob(os.path.join(self.mask_path, '*.png')))
        frame_list = []
        # pdb.set_trace()
        t = time.time()
        for i, fname in enumerate(fnames):

            frame_list.append(np.array(Image.open(fname), dtype=np.uint8))

        print('reading mask cost', time.time() - t)
        
        self.mask_data = np.stack(frame_list, axis=0)
        
        # create human_mask 
        # mask_data有可能為圖片路徑，假如影片太長或解析度太高，我會將影片與mask都以路徑的方式讀取，而不是一次全都讀取到ram裡，
        # 除非 RAM 很大，否則讀取影片的方式就要將影片切割成圖片再一張一張讀取   

        # pdb.set_trace()

        t = time.time()
        for index,mask in enumerate(self.mask_data):
            self.human_mask_data[index].append(np.array(find_human_mask(mask)))
        print('find_human_mask cost', time.time() - t)
        # create horizontal mask only for 1st frame
        self.horizontal_bar_points = find_horizontal_bar_mask(self.mask_data[0])
        
        # pdb.set_trace()
        # return frames
        
    def on_prev_frame(self):
        # self.tl_slide will trigger on setValue
        self.cursur = max(0, self.cursur-1) # cursor 決定第幾幀
        self.tl_slider.setValue(self.cursur)

    def on_next_frame(self):  # 移至下一幀
        # self.tl_slide will trigger on setValue
        self.cursur = min(self.cursur+1, self.num_frames-1)
        self.tl_slider.setValue(self.cursur)
        
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Upload_video.setText(_translate("MainWindow", "Upload Video"))
        self.Use_camera.setText(_translate("MainWindow", "Use Camera"))
        self.left_one_frame.setText(_translate("MainWindow", "Left"))
        self.right_one_frame.setText(_translate("MainWindow", "Right"))
        self.playBtn.setText(_translate("MainWindow", "START"))
        self.stopBtn.setText(_translate("MainWindow", "STOP"))
        self.main_canvas.setText(_translate("MainWindow", "indicate video"))
        self.position_label.setText(_translate("MainWindow", "TextLabel"))
        self.athelete_title.setText(_translate("MainWindow", " Athlete and Video Information"))
        self.athelete_title_2.setText(_translate("MainWindow", "hip angle"))
        self.label_12.setText(_translate("MainWindow", "l-eye"))
        self.label.setText(_translate("MainWindow", "l-ear"))
        self.label_6.setText(_translate("MainWindow", "l-shoulder"))
        self.label_7.setText(_translate("MainWindow", "l-elbow"))
        self.label_8.setText(_translate("MainWindow", "l-wrist"))
        self.label_9.setText(_translate("MainWindow", "l-hip"))
        self.label_10.setText(_translate("MainWindow", "l-knee"))
        self.label_11.setText(_translate("MainWindow", "l-ankle"))
        self.label_13.setText(_translate("MainWindow", "r-eye"))
        self.label_14.setText(_translate("MainWindow", "r-ear"))
        self.label_15.setText(_translate("MainWindow", "r-shoulder"))
        self.label_16.setText(_translate("MainWindow", "r-elbow"))
        self.label_17.setText(_translate("MainWindow", "r-wrist"))
        self.label_18.setText(_translate("MainWindow", "r-hip"))
        self.label_19.setText(_translate("MainWindow", "r-knee"))
        self.label_20.setText(_translate("MainWindow", "r-ankle"))
        self.label_2.setText(_translate("MainWindow", "Parameters"))
        self.label_3.setText(_translate("MainWindow", "高度 (Height)"))
        self.label_4.setText(_translate("MainWindow", "轉速 (TWIST & TURN ROTATION SPEED)"))
        self.label_5.setText(_translate("MainWindow", "滯空時間 (HAND OFF TIME)"))
        self.menu.setTitle(_translate("MainWindow", "File"))
        self.menuWindows.setTitle(_translate("MainWindow", "Windows"))
        self.menuExit.setTitle(_translate("MainWindow", "Exit"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.actionMivos.setText(_translate("MainWindow", "Mivos"))
        self.actionMotion_Analysis.setText(_translate("MainWindow", "Motion Analysis"))
from pyqtgraph import PlotWidget


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
